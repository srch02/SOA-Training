type UniteEnseignement {
    code: Int
    domaine: String
    responsable: String
    credits: Int
    semestre: Int
}

enum TypeModule {
    TRANSVERSAL
    PROFESSIONNEL
    RECHERCHE
}

type Module {
    matricule: String
    nom: String
    coefficient: Int
    volumeHoraire: Int
    type: TypeModule
    uniteEnseignement: UniteEnseignement
}

type QueryResolver {
    allUEs: [UniteEnseignement]
    ueByCode(code: Int!): UniteEnseignement
    ueByDomaine(domaine: String!): [UniteEnseignement]
    ueBySemestre(semestre: Int!): [UniteEnseignement]


    allModules: [Module]
    moduleByMatricule(matricule: String!): Module
    modulesByType(type: TypeModule!): [Module]
}

type MutationResolver {
    addUniteEnseignement(
        code: Int!
        domaine: String!
        responsable: String!
        credits: Int!
        semestre: Int!
    ): Boolean
    updateUniteEnseignement(
        code: Int!
        domaine: String!
        responsable: String!
        credits: Int!
        semestre: Int!
    ): Boolean
    deleteUniteEnseignement(code: Int!): Boolean


    createModule(
        matricule: String!
        nom: String!
        coefficient: Int!
        volumeHoraire: Int!
        type: TypeModule!
        ueCode: Int!
    ): Boolean
    updateModule(
        matricule: String!
        nom: String!
        coefficient: Int!
        volumeHoraire: Int!
        type: TypeModule!
        ueCode: Int!
    ): Boolean
    deleteModule(matricule: String!): Boolean
}

schema {
    query: QueryResolver
    mutation: MutationResolver
}
